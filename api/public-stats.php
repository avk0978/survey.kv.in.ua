<?php
/**
 * üõ°Ô∏è Protected API for public statistics
 * api/public-stats.php
 * 
 * –ó–ê–©–ò–¢–ê –û–¢ SQL –ò–ù–™–ï–ö–¶–ò–ô –ò –î–†–£–ì–ò–• –ê–¢–ê–ö:
 * - Whitelist –ø–æ–¥—Ö–æ–¥ –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
 * - –ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç DoS –∞—Ç–∞–∫
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - Rate limiting –¥–ª—è API –≤—ã–∑–æ–≤–æ–≤
 */

// üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
ini_set('display_errors', 0);
error_reporting(E_ALL);

// üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
header('Content-Type: application/json; charset=utf-8');
header('X-Content-Type-Options: nosniff');
header('X-Frame-Options: SAMEORIGIN');
header('X-XSS-Protection: 1; mode=block');

// üõ°Ô∏è CORS —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
$allowed_origins = [
    'http://survey.kv.in.ua',
    'https://survey.kv.in.ua',
    'http://localhost'
];
$origin = $_SERVER['HTTP_ORIGIN'] ?? '';
if (in_array($origin, $allowed_origins)) {
    header("Access-Control-Allow-Origin: $origin");
}

header('Access-Control-Allow-Methods: GET, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type');
header('Access-Control-Max-Age: 3600');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// üõ°Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã
if ($_SERVER['REQUEST_METHOD'] !== 'GET') {
    http_response_code(405);
    echo json_encode(['success' => false, 'error' => '–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π']);
    exit;
}

require_once '../config/database.php';

/**
 * üõ°Ô∏è –ú–µ–Ω–µ–¥–∂–µ—Ä –∫–µ—à–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
 */
class CacheManager {
    private static $cache_dir = '../cache/';
    private static $cache_ttl = 60; // üîß –£–ú–ï–ù–¨–®–ï–ù–û: 1 –º–∏–Ω—É—Ç–∞ –≤–º–µ—Å—Ç–æ 5 –º–∏–Ω—É—Ç
    
    /**
     * üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–µ—à–∞
     */
    public static function get($key) {
        $cache_file = self::$cache_dir . md5($key) . '.json';
        
        if (!file_exists($cache_file)) {
            return null;
        }
        
        $cache_data = json_decode(file_get_contents($cache_file), true);
        
        if (!$cache_data || !isset($cache_data['expires']) || time() > $cache_data['expires']) {
            @unlink($cache_file);
            return null;
        }
        
        return $cache_data['data'];
    }
    
    /**
     * üõ°Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–µ—à
     */
    public static function set($key, $data) {
        if (!is_dir(self::$cache_dir)) {
            @mkdir(self::$cache_dir, 0755, true);
        }
        
        $cache_file = self::$cache_dir . md5($key) . '.json';
        $cache_data = [
            'data' => $data,
            'expires' => time() + self::$cache_ttl,
            'created' => date('Y-m-d H:i:s')
        ];
        
        file_put_contents($cache_file, json_encode($cache_data), LOCK_EX);
    }
    
    /**
     * üõ°Ô∏è –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
     */
    public static function cleanup() {
        if (!is_dir(self::$cache_dir)) {
            return;
        }
        
        $files = glob(self::$cache_dir . '*.json');
        $now = time();
        
        foreach ($files as $file) {
            if (filemtime($file) < ($now - self::$cache_ttl * 2)) {
                @unlink($file);
            }
        }
    }
}

/**
 * üõ°Ô∏è –ó–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
 */
class SecureStatsAPI {
    private $database;
    private $pdo;
    
    // üõ°Ô∏è WHITELIST —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    private $allowed_actions = [
        'overview',
        'survey_types',
        'detailed'
    ];
    
    // üõ°Ô∏è WHITELIST —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∞–Ω–∫–µ—Ç
    private $allowed_survey_types = [
        'universal_survey',
        'residents',
        'osbb_heads',
        'osbb_members_board',
        'audit_commission',
        'managers',
        'oms_representatives',
        'legal_experts'
    ];
    
    public function __construct() {
        $this->database = new Database();
        $this->pdo = $this->database->getConnection();
    }
    
    /**
     * üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏—è
     */
    private function validateAction($action) {
        return in_array($action, $this->allowed_actions, true);
    }
    
    /**
     * üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∞–Ω–∫–µ—Ç—ã
     */
    private function validateSurveyType($survey_type) {
        return in_array($survey_type, $this->allowed_survey_types, true);
    }
    
    /**
     * üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public function getOverview() {
        $cache_key = 'stats_overview';
        $cached = CacheManager::get($cache_key);
        
        if ($cached !== null) {
            return $cached;
        }
        
        try {
            // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å prepared statements
            
            // –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –¢–û–ß–ù–û –∫–∞–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∞–Ω–∫–µ—Ç–∞–º–∏
            $overview_query = "
                SELECT 
                    COUNT(qa.id) as total_responses,
                    COUNT(DISTINCT qa.response_id) as total_surveys,
                    COUNT(DISTINCT CASE WHEN sr.is_completed = 1 THEN sr.id END) as completed_responses,
                    ROUND(AVG(sr.completion_percentage), 2) as avg_completion,
                    MIN(sr.created_at) as first_response,
                    MAX(sr.created_at) as last_response,
                    COUNT(DISTINCT DATE(sr.created_at)) as active_days
                FROM question_answers qa
                INNER JOIN survey_responses sr ON qa.response_id = sr.response_id
                WHERE sr.response_id IS NOT NULL
            ";
            
            $stmt = $this->pdo->prepare($overview_query);
            $stmt->execute();
            $overview = $stmt->fetch();
            
            // –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º - —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
            $daily_query = "
                SELECT 
                    DATE(sr.created_at) as response_date,
                    COUNT(qa.id) as daily_count
                FROM question_answers qa
                INNER JOIN survey_responses sr ON qa.response_id = sr.response_id
                WHERE sr.created_at >= DATE_SUB(NOW(), INTERVAL 14 DAY)
                  AND sr.response_id IS NOT NULL
                GROUP BY DATE(sr.created_at)
                ORDER BY response_date DESC
                LIMIT 14
            ";
            
            $stmt = $this->pdo->prepare($daily_query);
            $stmt->execute();
            $daily_activity = $stmt->fetchAll();
            
            $result = [
                'overview' => $overview,
                'daily_activity' => array_reverse($daily_activity), // –û—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                'generated_at' => date('Y-m-d H:i:s')
            ];
            
            CacheManager::set($cache_key, $result);
            return $result;
            
        } catch (PDOException $e) {
            error_log("Stats overview error: " . $e->getMessage());
            throw new Exception("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        }
    }
    
    /**
     * üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∫–µ—Ç
     */
    public function getSurveyTypes() {
        $cache_key = 'stats_survey_types';
        $cached = CacheManager::get($cache_key);
        
        if ($cached !== null) {
            return $cached;
        }
        
        try {
            $query = "
                SELECT 
                    st.id,
                    st.name,
                    st.slug,
                    st.total_questions,
                    COUNT(sr.id) as total_responses,
                    COUNT(CASE WHEN sr.is_completed = 1 THEN 1 END) as completed_responses,
                    ROUND(AVG(sr.completion_percentage), 2) as avg_completion,
                    MAX(sr.created_at) as last_response,
                    MIN(sr.created_at) as first_response
                FROM survey_types st
                LEFT JOIN survey_responses sr ON st.id = sr.survey_type_id
                WHERE st.is_active = 1
                GROUP BY st.id, st.name, st.slug, st.total_questions
                ORDER BY total_responses DESC, st.name
            ";
            
            $stmt = $this->pdo->prepare($query);
            $stmt->execute();
            $result = $stmt->fetchAll();
            
            CacheManager::set($cache_key, $result);
            return $result;
            
        } catch (PDOException $e) {
            error_log("Stats survey types error: " . $e->getMessage());
            throw new Exception("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∏–ø–∞—Ö –∞–Ω–∫–µ—Ç");
        }
    }
    
    /**
     * üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     */
    public function getDetailed($survey_type) {
        // üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∞–Ω–∫–µ—Ç—ã
        if (!$this->validateSurveyType($survey_type)) {
            throw new Exception("–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø –∞–Ω–∫–µ—Ç–∏");
        }
        
        $cache_key = "stats_detailed_{$survey_type}";
        $cached = CacheManager::get($cache_key);
        
        if ($cached !== null) {
            return $cached;
        }
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–∞ –∞–Ω–∫–µ—Ç—ã
            $type_query = "SELECT id, name FROM survey_types WHERE slug = ? AND is_active = 1 LIMIT 1";
            $stmt = $this->pdo->prepare($type_query);
            $stmt->execute([$survey_type]);
            $survey_info = $stmt->fetch();
            
            if (!$survey_info) {
                throw new Exception("–¢–∏–ø –∞–Ω–∫–µ—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
            }
            
            // –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º
            $detailed_query = "
                SELECT 
                    qa.question_key,
                    qa.answer_value,
                    COUNT(*) as count,
                    ROUND((COUNT(*) * 100.0 / (
                        SELECT COUNT(DISTINCT qa2.response_id) 
                        FROM question_answers qa2 
                        JOIN survey_responses sr2 ON qa2.response_id = sr2.response_id 
                        WHERE sr2.survey_type_id = ?
                    )), 2) as percentage
                FROM question_answers qa
                JOIN survey_responses sr ON qa.response_id = sr.response_id
                WHERE sr.survey_type_id = ?
                GROUP BY qa.question_key, qa.answer_value
                ORDER BY qa.question_number, qa.answer_value
            ";
            
            $stmt = $this->pdo->prepare($detailed_query);
            $stmt->execute([$survey_info['id'], $survey_info['id']]);
            $detailed_stats = $stmt->fetchAll();
            
            $result = [
                'survey_info' => $survey_info,
                'detailed_stats' => $detailed_stats,
                'generated_at' => date('Y-m-d H:i:s')
            ];
            
            CacheManager::set($cache_key, $result);
            return $result;
            
        } catch (PDOException $e) {
            error_log("Stats detailed error: " . $e->getMessage());
            throw new Exception("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏");
        }
    }
}

// üõ°Ô∏è –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
try {
    // üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    $action = $_GET['action'] ?? '';
    $survey_type = $_GET['survey_type'] ?? null;
    $force_refresh = isset($_GET['refresh']) && $_GET['refresh'] === '1'; // üîß –ù–û–í–´–ô: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    
    // üõ°Ô∏è –û—á–∏—Å—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    $action = preg_replace('/[^a-z_]/', '', strtolower($action));
    if ($survey_type) {
        $survey_type = preg_replace('/[^a-z_]/', '', strtolower($survey_type));
    }
    
    // üîß –ù–û–í–´–ô: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if ($force_refresh) {
        $cache_keys = ['stats_overview', 'stats_survey_types'];
        foreach ($cache_keys as $key) {
            $cache_file = '../cache/' . md5($key) . '.json';
            if (file_exists($cache_file)) {
                @unlink($cache_file);
            }
        }
    }
    
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã (–ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞)
    $user_ip = Database::getUserIP();
    $rate_limit_file = '../cache/rate_limit_stats.json';
    
    if (file_exists($rate_limit_file)) {
        $rate_data = json_decode(file_get_contents($rate_limit_file), true) ?: [];
        $now = time();
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ (—Å—Ç–∞—Ä—à–µ 1 –º–∏–Ω—É—Ç—ã)
        $rate_data = array_filter($rate_data, function($timestamp) use ($now) {
            return ($now - $timestamp) < 60;
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–Ω—É—Ç—É
        $recent_requests = array_filter($rate_data, function($entry) use ($user_ip, $now) {
            return isset($entry['ip']) && $entry['ip'] === $user_ip && ($now - $entry['time']) < 60;
        });
        
        if (count($recent_requests) > 30) { // –ú–∞–∫—Å–∏–º—É–º 30 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –º–∏–Ω—É—Ç—É
            http_response_code(429);
            echo json_encode(['success' => false, 'error' => '–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –∑–∞–ø–∏—Ç—ñ–≤']);
            exit;
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        $rate_data[] = ['ip' => $user_ip, 'time' => $now];
        file_put_contents($rate_limit_file, json_encode($rate_data));
    }
    
    // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫–µ—à–∞
    CacheManager::cleanup();
    
    // –°–æ–∑–¥–∞–Ω–∏–µ API –æ–±—ä–µ–∫—Ç–∞
    $stats_api = new SecureStatsAPI();
    
    // üõ°Ô∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –¥–µ–π—Å—Ç–≤–∏—é
    switch ($action) {
        case 'overview':
            $data = $stats_api->getOverview();
            APIResponse::send(APIResponse::success($data, '–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞'));
            break;
            
        case 'survey_types':
            $data = $stats_api->getSurveyTypes();
            APIResponse::send(APIResponse::success($data, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞—Ö –∞–Ω–∫–µ—Ç –æ—Ç—Ä–∏–º–∞–Ω–∞'));
            break;
            
        case 'detailed':
            if (!$survey_type) {
                APIResponse::send(APIResponse::error('–ù–µ –≤–∫–∞–∑–∞–Ω–æ —Ç–∏–ø –∞–Ω–∫–µ—Ç–∏', 400));
            }
            
            $data = $stats_api->getDetailed($survey_type);
            APIResponse::send(APIResponse::success($data, '–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–∞'));
            break;
            
        default:
            APIResponse::send(APIResponse::error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –¥—ñ—è. –î–æ—Å—Ç—É–ø–Ω—ñ: overview, survey_types, detailed', 400));
    }
    
} catch (Exception $e) {
    error_log("Public stats API error: " . $e->getMessage());
    APIResponse::send(APIResponse::error($e->getMessage(), 500));
}
?>