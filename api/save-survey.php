<?php
/**
 * üõ°Ô∏è PROTECTED API for saving questionnaires
 * api/save-survey.php
 * 
 * –ü–û–õ–ù–ê–Ø –ó–ê–©–ò–¢–ê –û–¢ SQL –ò–ù–™–ï–ö–¶–ò–ô –ò –î–†–£–ì–ò–• –ê–¢–ê–ö:
 * - Rate limiting –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 * - CSRF –∑–∞—â–∏—Ç–∞
 * - –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
 */

// üõ°Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
ini_set('display_errors', 0);
error_reporting(E_ALL);

// üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
header('Content-Type: application/json; charset=utf-8');
header('X-Content-Type-Options: nosniff');
header('X-Frame-Options: DENY');
header('X-XSS-Protection: 1; mode=block');

// üõ°Ô∏è CORS —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
$allowed_origins = [
    'http://survey.kv.in.ua',
    'https://survey.kv.in.ua',
    'http://localhost'
];
$origin = $_SERVER['HTTP_ORIGIN'] ?? '';
if (in_array($origin, $allowed_origins)) {
    header("Access-Control-Allow-Origin: $origin");
} else {
    header('Access-Control-Allow-Origin: null');
}

header('Access-Control-Allow-Methods: POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, X-Requested-With');
header('Access-Control-Max-Age: 86400');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–æ–≤
if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    http_response_code(200);
    exit;
}

// üõ°Ô∏è –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
    http_response_code(405);
    echo json_encode(['success' => false, 'error' => '–ú–µ—Ç–æ–¥ –Ω–µ –¥–æ–∑–≤–æ–ª–µ–Ω–∏–π']);
    exit;
}

require_once '../config/database.php';

/**
 * üõ°Ô∏è –ö–ª–∞—Å—Å –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –∞—Ç–∞–∫
 */
class SecurityManager {
    private static $rate_limit_file = '../logs/rate_limit.json';
    private static $max_requests_per_hour = 10; // –ú–∞–∫—Å–∏–º—É–º 10 –∞–Ω–∫–µ—Ç –≤ —á–∞—Å —Å –æ–¥–Ω–æ–≥–æ IP
    private static $max_requests_per_day = 50;  // –ú–∞–∫—Å–∏–º—É–º 50 –∞–Ω–∫–µ—Ç –≤ –¥–µ–Ω—å —Å –æ–¥–Ω–æ–≥–æ IP
    
    /**
     * üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
     */
    public static function checkRateLimit($ip) {
        $now = time();
        $hour_ago = $now - 3600;
        $day_ago = $now - 86400;
        
        // –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!file_exists(self::$rate_limit_file)) {
            file_put_contents(self::$rate_limit_file, json_encode([]));
        }
        
        $rate_data = json_decode(file_get_contents(self::$rate_limit_file), true) ?: [];
        
        // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        foreach ($rate_data as $recorded_ip => $timestamps) {
            $rate_data[$recorded_ip] = array_filter($timestamps, function($timestamp) use ($day_ago) {
                return $timestamp > $day_ago;
            });
            
            if (empty($rate_data[$recorded_ip])) {
                unset($rate_data[$recorded_ip]);
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ IP
        $ip_requests = $rate_data[$ip] ?? [];
        
        $requests_last_hour = count(array_filter($ip_requests, function($timestamp) use ($hour_ago) {
            return $timestamp > $hour_ago;
        }));
        
        $requests_last_day = count($ip_requests);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        if ($requests_last_hour >= self::$max_requests_per_hour) {
            return ['allowed' => false, 'reason' => '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –≥–æ–¥–∏–Ω—É'];
        }
        
        if ($requests_last_day >= self::$max_requests_per_day) {
            return ['allowed' => false, 'reason' => '–ü–µ—Ä–µ–≤–∏—â–µ–Ω–æ –ª—ñ–º—ñ—Ç –∑–∞–ø–∏—Ç—ñ–≤ –∑–∞ –¥–µ–Ω—å'];
        }
        
        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        $rate_data[$ip][] = $now;
        file_put_contents(self::$rate_limit_file, json_encode($rate_data));
        
        return ['allowed' => true];
    }
    
    /**
     * üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
     */
    public static function validateRequestSize() {
        $max_size = 1024 * 1024; // 1MB –º–∞–∫—Å–∏–º—É–º
        $content_length = $_SERVER['CONTENT_LENGTH'] ?? 0;
        
        if ($content_length > $max_size) {
            return false;
        }
        
        return true;
    }
    
    /**
     * üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –¥–∞–Ω–Ω—ã—Ö
     */
    public static function detectSuspiciousPatterns($data) {
        $suspicious_patterns = [
            '/union\s+select/i',
            '/drop\s+table/i',
            '/insert\s+into/i',
            '/delete\s+from/i',
            '/<script/i',
            '/javascript:/i',
            '/vbscript:/i',
            '/onload=/i',
            '/onclick=/i'
        ];
        
        $data_string = json_encode($data);
        
        foreach ($suspicious_patterns as $pattern) {
            if (preg_match($pattern, $data_string)) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * üõ°Ô∏è –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
     */
    public static function logSuspiciousActivity($ip, $user_agent, $reason, $data = null) {
        $log_entry = [
            'timestamp' => date('Y-m-d H:i:s'),
            'ip' => $ip,
            'user_agent' => $user_agent,
            'reason' => $reason,
            'data_sample' => $data ? substr(json_encode($data), 0, 200) : null
        ];
        
        $log_file = '../logs/security.log';
        file_put_contents($log_file, json_encode($log_entry) . "\n", FILE_APPEND | LOCK_EX);
        
        // –í –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª—É—á–∞—è—Ö –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if (strpos($reason, 'SQL injection') !== false) {
            error_log("SECURITY ALERT: Possible SQL injection attempt from IP: $ip");
        }
    }
}

try {
    // üõ°Ô∏è –ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    $user_ip = Database::getUserIP();
    $user_agent = Database::getUserAgent();
    
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
    $rate_check = SecurityManager::checkRateLimit($user_ip);
    if (!$rate_check['allowed']) {
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Rate limit exceeded', null);
        APIResponse::send(APIResponse::error($rate_check['reason'], 429));
    }
    
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ –∑–∞–ø—Ä–æ—Å–∞
    if (!SecurityManager::validateRequestSize()) {
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Request too large', null);
        APIResponse::send(APIResponse::error('–ó–∞–ø–∏—Ç –∑–∞–Ω–∞–¥—Ç–æ –≤–µ–ª–∏–∫–∏–π', 413));
    }
    
    // üõ°Ô∏è –ü–æ–ª—É—á–µ–Ω–∏–µ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è JSON –¥–∞–Ω–Ω—ã—Ö
    $json_input = file_get_contents('php://input');
    if (empty($json_input)) {
        APIResponse::send(APIResponse::error('–í—ñ–¥—Å—É—Ç–Ω—ñ –¥–∞–Ω—ñ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è', 400));
    }
    
    $input_data = json_decode($json_input, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Invalid JSON', $json_input);
        APIResponse::send(APIResponse::error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö', 400));
    }
    
    // üõ°Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    if (SecurityManager::detectSuspiciousPatterns($input_data)) {
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Suspicious patterns detected', $input_data);
        APIResponse::send(APIResponse::error('–í–∏—è–≤–ª–µ–Ω–æ –ø—ñ–¥–æ–∑—Ä—ñ–ª—ñ –¥–∞–Ω—ñ', 400));
    }
    
    // üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
    $required_fields = ['survey_type', 'responses'];
    foreach ($required_fields as $field) {
        if (!isset($input_data[$field])) {
            APIResponse::send(APIResponse::error("–í—ñ–¥—Å—É—Ç–Ω—î –æ–±–æ–≤'—è–∑–∫–æ–≤–µ –ø–æ–ª–µ: $field", 400));
        }
    }
    
    // üõ°Ô∏è –û—á–∏—Å—Ç–∫–∞ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    $survey_type = Database::sanitizeInput($input_data['survey_type']);
    $responses = $input_data['responses'];
    $timestamp = $input_data['timestamp'] ?? date('Y-m-d H:i:s');
    $total_questions = (int)($input_data['total_questions'] ?? 0);
    $answered_questions = (int)($input_data['answered_questions'] ?? 0);
    $completion_percentage = (int)($input_data['completion_percentage'] ?? 0);
    
    // üõ°Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    $database = new Database();
    $pdo = $database->getConnection();
    
    // üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–∞ –∞–Ω–∫–µ—Ç—ã
    if (!$database->validateSurveyType($survey_type)) {
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Invalid survey type', $survey_type);
        APIResponse::send(APIResponse::error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π —Ç–∏–ø –∞–Ω–∫–µ—Ç–∏', 400));
    }
    
    // üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–æ–≤
    $validation_result = SurveyValidator::validateSurveyAnswers($responses, $survey_type);
    if (!$validation_result['valid']) {
        $error_message = '–ü–æ–º–∏–ª–∫–∏ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó: ' . implode(', ', $validation_result['errors']);
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Validation failed', $validation_result);
        APIResponse::send(APIResponse::error($error_message, 400));
    }
    
    // üõ°Ô∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if ($answered_questions > 100 || $total_questions > 100) {
        SecurityManager::logSuspiciousActivity($user_ip, $user_agent, 'Suspicious question count', [
            'answered' => $answered_questions,
            'total' => $total_questions
        ]);
        APIResponse::send(APIResponse::error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–∏—Ç–∞–Ω—å', 400));
    }
    
    if ($completion_percentage < 0 || $completion_percentage > 100) {
        APIResponse::send(APIResponse::error('–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è', 400));
    }
    
    // üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    $save_data = [
        'survey_type' => $survey_type,
        'responses' => $responses,
        'timestamp' => $timestamp,
        'total_questions' => $total_questions,
        'answered_questions' => $answered_questions,
        'completion_percentage' => $completion_percentage
    ];
    
    $response_id = $database->saveSurveyResponse($save_data);
    
    if ($response_id) {
        // –£—Å–ø–µ—à–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        APIResponse::send(APIResponse::success([
            'response_id' => $response_id,
            'survey_type' => $survey_type,
            'answers_saved' => count($responses),
            'completion_percentage' => $completion_percentage
        ], '–ê–Ω–∫–µ—Ç—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ'));
    } else {
        APIResponse::send(APIResponse::error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏', 500));
    }
    
} catch (Exception $e) {
    // üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
    error_log("Survey save error: " . $e->getMessage());
    
    // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—É—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞
    if (strpos($e->getMessage(), 'SQL') !== false || strpos($e->getMessage(), 'injection') !== false) {
        SecurityManager::logSuspiciousActivity(
            Database::getUserIP(),
            Database::getUserAgent(),
            'Database error (possible attack): ' . $e->getMessage(),
            $_POST
        );
    }
    
    APIResponse::send(APIResponse::error('–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', 500));
}
?>